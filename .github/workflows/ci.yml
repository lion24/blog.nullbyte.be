name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - staging
      - main
  pull_request:
    branches:
      - dev
      - staging
      - main

# Cancel in-progress runs for the same workflow + branch combination
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Tests job - required for all branches
  tests:
    name: ci/tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          npx prisma generate
          npx prisma db push

      - name: Run linter
        run: npm run lint

      - name: Run type check
        run: npx tsc --noEmit

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret-key-for-ci
        run: npm test

  # Build job - required for main branch only
  build:
    name: ci/build
    runs-on: ubuntu-latest
    # Only run build check for main branch PRs and pushes
    if: github.base_ref == 'main' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Build application
        env:
          SKIP_ENV_VALIDATION: true
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/placeholder
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: build-time-secret
          GITHUB_CLIENT_ID: placeholder
          GITHUB_CLIENT_SECRET: placeholder
        run: npm run build

      - name: Check build output
        run: |
          if [ ! -d ".next" ]; then
            echo "Build failed: .next directory not found"
            exit 1
          fi
          echo "Build successful"

  # Summary job for branch-specific requirements
  status-check:
    name: All Required Checks Passed
    runs-on: ubuntu-latest
    needs: [tests, build]
    if: always()

    steps:
      - name: Check test results
        if: needs.tests.result != 'success'
        run: |
          echo "Tests failed or were skipped"
          exit 1

      - name: Check build results (main only)
        if: (github.base_ref == 'main' || github.ref == 'refs/heads/main') && needs.build.result != 'success'
        run: |
          echo "Build failed or was skipped"
          exit 1

      - name: All checks passed
        run: echo "All required checks passed successfully"
